<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
	
	<!-- 
	AspectJ의 Pointcut 표현식 (이유 : 여러 기능들중에서 내가 찾고자하는 기능을 찾기위해서 )
	
									하위패키지						0개 이상의 파라미터
	1. execution(Integer kr.spring.ch01..WriteArticleService.write(..))
		리턴 타입이 Integer인 WriteArticleService의 파라미터가 0개 이상인  write()메서드
	
	2. execution(public void set*(..)) 
		리턴 타입이 void이고 메서드 이름이 set으로 시작하고, 파라미터가 0개이상인 메서드 호출
	
	3. execution(*kr.spring.ch01.*.*())
		kr.spring.ch01 패키지의 파라미터가 없는 모든 메서드 호출
		
	4. execution(*kr.spring.ch01..*.*(..))
		kr.spring.ch01 패키지 및 하위 패키지에 있는 파라미터가 0개 이상인 메서드 호출
		
	5. execution(* get(*))
		이름이 get으로 시작하고 1개의 파라미터를 갖는 메서드 호출
		
	6. execution(* get(*,*)
		이름이 get으로 시작하고 2개의 파라미트를 갖는 메서으 호출
		
	7. execution(* read*(Integer,..))
	    메서드 이름이 read로 시작하고, 첫 번째 파라미터 타입이 Integer이며, 1개 이상의 파라미터를 갖는 메서드 호출
	 -->
	 
	 <!-- *공통* 기능이 구현된 클래스의 빈 객체 설정 --> 
	 <bean id="myFirstAdvice" class="kr.spring.ch21.MyFirstAdvice"/>
	 
	 <!-- *핵심* 기능이 구현된 클래스 빈 객체 설정 -->
	 <bean id="product" class="kr.spring.core.Product"/>
	 
	 <!-- AOP 설정 -->
	 <aop:config>
	 	<!-- 공통 기능을 지정 -->
	 	<aop:aspect id="aspect" ref="myFirstAdvice">
	 		<!-- 핵심 기능을 지정 -->
	 		<aop:pointcut expression="execution(public String launch())" id="publicMethod"/>
	 		<!-- 핵심 기능을 실행 될 때 -언제- 공통 기능을 실행할 지 지정 -->
	 		<!-- <aop:before method="before" pointcut-ref="publicMethod"/> -->
	 		
	 														  <!-- public void afterReturning(String msg) 파라미터 존재-> 파라미터 넣어줘야함 -->
	 		<!-- <aop:after-returning method="afterReturning" pointcut-ref="publicMethod" returning="msg"/> -->
	 		
	 																		 <!-- (Exception e) -->
	 		<!-- <aop:after-throwing method="afterThrowing" pointcut-ref="publicMethod" throwing="e"/> -->
	 		
	 		<!-- <aop:after method="after" pointcut-ref="publicMethod"/> -->
	 		
	 		<aop:around method="around" pointcut-ref="publicMethod"/>
	 		
	 	</aop:aspect>
	 </aop:config>
	 
	 
	 
	 
	 
	 
</beans>































